{"version":3,"sources":["components/cities.jsx","utils/points-to-line-commands.js","components/controls.jsx","updaters/clear-solution.js","utils/random-cities.js","utils/point.js","updaters/new-cities.js","updaters/new-count.js","utils/chromosome.js","updaters/new-random-solution.js","utils/population.js","updaters/new-solution.js","components/app.jsx","index.js"],"names":["Cities","points","cities","path","height","width","style","styles","container","viewBox","xmlns","map","city","cx","x","cy","y","key","id","r","d","point","index","join","fill","stroke","padding","Controls","count","onClearClick","onCountChange","onNewClick","onRandomClick","onSolveClick","onClick","type","min","max","onChange","value","clearSolution","bestCost","undefined","currentCost","randomCities","maxX","maxY","Array","random","uniqueId","newCities","Number","newCount","nextCount","diff","newLength","length","slice","concat","create","cost","measureFitness","chromosome","mutate","firstIndex","secondIndex","temp","sortValue","a","b","dropRight","zip","tail","reduce","sum","deltaX","deltaY","Math","hypot","Point","newRandomSolution","Infinity","solution","Chromosome","shuffle","round","selectMatingPool","population","size","sortedByCost","sort","take","breed","toSize","amountNeeded","newMembers","sampleSize","crossoverPoint","firstPart","secondPart","without","mutations","forEach","getBest","minBy","newSolution","fittest","best","maxIterations","stableLimit","nextGeneration","chromosomes","stableCount","populationSize","matingPoolSize","i","localBest","Population","App","state","handleNewClick","setState","handleClearClick","handleCountChange","event","bind","target","handleRandomClick","handleSolveClick","this","Fragment","React","Component","ReactDOM","render","createElement","document","getElementById"],"mappings":"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","file":"static/js/main.6a070bad.chunk.js","sourcesContent":["import React from 'react';\nimport pointsToLineCommands from '../utils/points-to-line-commands';\n\nexport default function Cities({ cities, path }) {\n  return (\n    <svg\n      height=\"500\"\n      width=\"500\"\n      style={styles.container}\n      viewBox=\"0 0 100 100\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      {cities.map(city => (\n        <circle\n          cx={city.x}\n          cy={city.y}\n          key={city.id}\n          r=\"1\"\n        />\n      ))}\n      {path && (\n        <path\n          d={pointsToLineCommands(path)}\n          fill=\"transparent\"\n          stroke=\"black\"\n        />\n      )}\n    </svg>\n  );\n}\n\nconst styles = {\n  container: {\n    padding: '1rem',\n  },\n};\n","// Convert a list of points into the SVG path commands needed to draw a line between them.\nexport default function pointsToLineCommands(points) {\n  const commands = points.map((point, index) => {\n    let command;\n\n    if (index === 0) {\n      // For the first point, just move the \"cursor\" to its position.\n      command = 'M';\n    } else {\n      // For subsequent points, draw a line from the current position to a new position.\n      command = 'L';\n    }\n\n    return `${command} ${point.x} ${point.y}`;\n  });\n\n  return commands.join(' ');\n}\n","import React from 'react';\n\nexport default function Controls({\n  count,\n  onClearClick,\n  onCountChange,\n  onNewClick,\n  onRandomClick,\n  onSolveClick,\n}) {\n  return (\n    <div>\n      <button onClick={onNewClick} type=\"button\">\n        New Cities\n      </button>\n      <input\n        min=\"2\"\n        max=\"50\"\n        onChange={onCountChange}\n        style={styles.count}\n        type=\"number\"\n        value={count}\n      />\n      <button onClick={onClearClick} type=\"button\">\n        Clear\n      </button>\n      <button onClick={onRandomClick} type=\"button\">\n        Random Solution\n      </button>\n      <button onClick={onSolveClick} type=\"button\">\n        Solve!\n      </button>\n    </div>\n  );\n}\n\nconst styles = {\n  count: {\n    width: 50,\n  },\n};\n","export default function clearSolution() {\n  return {\n    bestCost: undefined,\n    currentCost: undefined,\n    path: undefined,\n  };\n}\n","import { random } from 'lodash';\nimport * as Point from './point';\n\nexport default function randomCities(count, maxX = 100, maxY = 100) {\n  return new Array(count).fill(0).map(() => {\n    return Point.create(\n      random(0, maxX),\n      random(0, maxY),\n    );\n  });\n}\n","import { uniqueId } from 'lodash';\n\nexport function create(x, y) {\n  return { x, y, id: uniqueId() };\n}\n\nexport function distance(a, b) {\n  const deltaX = a.x - b.x;\n  const deltaY = a.y - b.y;\n  return Math.hypot(deltaX, deltaY);\n}\n","import randomCities from '../utils/random-cities';\n\nexport default function newCities({ count }) {\n  return {\n    bestCost: undefined,\n    cities: randomCities(Number(count)),\n    currentCost: undefined,\n    path: undefined,\n  };\n}\n","import randomCities from '../utils/random-cities';\n\nexport default function newCount(nextCount, { cities, count }) {\n  const diff = nextCount - count;\n\n  if (diff < 0) {\n    const newLength = cities.length + diff;\n\n    return {\n      bestCost: undefined,\n      cities: cities.slice(0, newLength),\n      currentCost: undefined,\n      count: nextCount,\n      path: undefined,\n    };\n  } else {\n    const newCities = randomCities(diff);\n\n    return {\n      bestCost: undefined,\n      cities: cities.concat(newCities),\n      currentCost: undefined,\n      count: nextCount,\n      path: undefined,\n    };\n  }\n}\n","import { dropRight, random, tail, take, without, zip } from 'lodash';\nimport * as Point from './point';\n\nexport function create(cities) {\n  return {\n    path: cities,\n    cost: measureFitness(cities),\n  };\n}\n\n// Get the cost (AKA \"fitness\") of a chromosome. Lower cost is \"better\".\nexport function cost(chromosome) {\n  return chromosome.cost;\n}\n\n// Mutate a chromosome by swapping random pairs of items in its path.\nexport function mutate(chromosome) {\n  const path = chromosome.path;\n  const firstIndex = random(0, path.length - 1);\n  const secondIndex = random(0, path.length - 1);\n  const temp = path[firstIndex];\n\n  path[firstIndex] = path[secondIndex]; // eslint-disable-line no-param-reassign\n  path[secondIndex] = temp; // eslint-disable-line no-param-reassign\n\n  return chromosome;\n}\n\n// Combine paths from two chromosomes.\nexport function mate(a, b) {\n  const crossoverPoint = Math.round(a.path.length / 2);\n  const firstPart = take(a.path, crossoverPoint);\n  const secondPart = without(b.path, ...firstPart);\n\n  return create(firstPart.concat(secondPart));\n}\n\n// Return the values necessary to sort two chromsomes based on their costs.\nexport function sortValue(a, b) {\n  if (a.cost < b.cost) {\n    return -1;\n  }\n\n  if (a.cost > b.cost) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction measureFitness(path) {\n  const pairs = dropRight(zip(path, tail(path)), 1);\n  return pairs.reduce((sum, [a, b]) => {\n    return sum + Point.distance(a, b);\n  }, 0);\n}\n","import { shuffle } from 'lodash';\nimport * as Chromosome from '../utils/chromosome';\n\nexport default function newRandomSolution({ bestCost = Infinity, cities }) {\n  const solution = Chromosome.create(shuffle(cities));\n  const cost = Math.round(Chromosome.cost(solution));\n\n  return {\n    bestCost: Math.min(bestCost, cost),\n    currentCost: cost,\n    path: solution.path,\n  };\n}\n","import { minBy, sampleSize, shuffle, take } from 'lodash';\nimport * as Chromosome from './chromosome';\n\nexport function create(cities, size = 100) {\n  return {\n    chromosomes: new Array(size).fill(0).map(() => {\n      return Chromosome.create(shuffle(cities));\n    }),\n  };\n}\n\n// Find a chromosome with a low cost by evolving multiple generations of solutions.\nexport function evolve(population, maxIterations = 1000, stableLimit = 20, mutations = 5) {\n  let best;\n  let currentCost = Infinity;\n  let nextGeneration = population.chromosomes;\n  let stableCount = 0;\n  const populationSize = population.chromosomes.length;\n  const matingPoolSize = Math.round(populationSize / 2);\n\n  for (let i = 0; i < maxIterations; i++) {\n    if (stableCount >= stableLimit) {\n      break;\n    }\n\n    const matingPool = selectMatingPool(nextGeneration, matingPoolSize);\n    nextGeneration = breed(matingPool, populationSize);\n    nextGeneration = mutate(nextGeneration, mutations);\n\n    const localBest = getBest(nextGeneration);\n\n    if (localBest.cost < currentCost) {\n      best = localBest;\n      currentCost = localBest.cost;\n      stableCount = 0;\n    } else {\n      stableCount++;\n    }\n  }\n\n  return best;\n}\n\n// Select a subset of the population to breed together.\nfunction selectMatingPool(population, size) {\n  const sortedByCost = population.sort(Chromosome.sortValue);\n\n  return shuffle(take(sortedByCost, size));\n}\n\n// Take a population and increase its size by breeding together the requried number of members.\nfunction breed(population, toSize) {\n  const amountNeeded = toSize - population.length;\n  const newMembers = new Array(amountNeeded).fill(0).map(() => {\n    const [first, second] = sampleSize(population, 2);\n    return Chromosome.mate(first, second);\n  });\n\n  return population.concat(newMembers);\n}\n\n// Perform random mutations on members of the population.\nfunction mutate(population, mutations) {\n  const mutators = sampleSize(population, mutations);\n\n  mutators.forEach(Chromosome.mutate);\n  return population;\n}\n\nfunction getBest(population) {\n  return minBy(population, chromosome => chromosome.cost);\n}\n","import * as Chromosome from '../utils/chromosome';\nimport * as Population from '../utils/population';\n\nexport default function newSolution({ bestCost = Infinity, cities }) {\n  const population = Population.create(cities);\n  const fittest = Population.evolve(population);\n  const cost = Math.round(Chromosome.cost(fittest));\n\n  return {\n    bestCost: Math.min(bestCost, cost),\n    currentCost: cost,\n    path: fittest.path,\n  };\n}\n","import React from 'react';\nimport Cities from './cities';\nimport Controls from './controls';\nimport clearSolution from '../updaters/clear-solution';\nimport newCities from '../updaters/new-cities';\nimport newCount from '../updaters/new-count';\nimport newRandomSolution from '../updaters/new-random-solution';\nimport newSolution from '../updaters/new-solution';\nimport randomCities from '../utils/random-cities';\n\nexport default class App extends React.Component {\n  state = {\n    bestCost: undefined,\n    cities: randomCities(10),\n    currentCost: undefined,\n    count: 10,\n    path: undefined,\n  }\n\n  handleNewClick = () => {\n    this.setState(newCities);\n  }\n\n  handleClearClick = () => {\n    this.setState(clearSolution);\n  }\n\n  handleCountChange = (event) => {\n    this.setState(newCount.bind(null, event.target.value));\n  }\n\n  handleRandomClick = () => {\n    this.setState(newRandomSolution);\n  }\n\n  handleSolveClick = () => {\n    this.setState(newSolution);\n  }\n\n  render() {\n    return (\n      <div>\n        <Cities\n          cities={this.state.cities}\n          path={this.state.path}\n        />\n        <Controls\n          onClearClick={this.handleClearClick}\n          onCountChange={this.handleCountChange}\n          onNewClick={this.handleNewClick}\n          onRandomClick={this.handleRandomClick}\n          onSolveClick={this.handleSolveClick}\n          count={this.state.count}\n        />\n        {this.state.currentCost && (\n          <React.Fragment>\n            <div>Current Distance: {this.state.currentCost}</div>\n            <div>Best Distance: {this.state.bestCost}</div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}